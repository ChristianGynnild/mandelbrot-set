// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

int screenWidth, screenHeight;
float zoom;
float angle;
uint maxIterations;
float centerReal, centerImaginary;
float4 hue;
float morphX, morphY;



RWTexture2D<float4> Result;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float boundsLength = 20.0f; 
    uint iterationCounter = 0;
    float ratio = (float)screenWidth/(float)screenHeight;
    float2 rotation = float2(cos(angle), sin(angle));

    float realSquared, imaginarySquared;

    float2 complexNumber0 = float2(((float)id.x/(float)screenWidth -0.5f)*ratio/zoom,
                                   ((float)id.y/(float)screenHeight-0.5f)/zoom);

    complexNumber0 = float2(complexNumber0.x*rotation.x-complexNumber0.y*rotation.y + centerReal, 
                            complexNumber0.x*rotation.y+complexNumber0.y*rotation.x + centerImaginary);


    float2 complexNumber = complexNumber0;
    

    for (uint i = 0; i < maxIterations; i++){
        realSquared = complexNumber.x*complexNumber.x;
        imaginarySquared = complexNumber.y*complexNumber.y;

        if (realSquared+imaginarySquared > boundsLength*boundsLength){
            break;
        }
        else{
            complexNumber = float2(realSquared-imaginarySquared, 2.0f * complexNumber.x * complexNumber.y) + complexNumber0 + float2(morphX, morphY);
        }
        iterationCounter += 1;

    }

    float interpolation = (length(complexNumber)-boundsLength)/(boundsLength*boundsLength-boundsLength); //Linear interpolation
    interpolation = log2(log10(length(complexNumber))/log10(boundsLength)); //exponential interpolation

    float4 color = {0.0f, 0.0f, 0.0f, 1.0f};

    float val = sqrt((float)iterationCounter/(float)maxIterations)*20.0f;
    color = float4(
                sin(val*hue.r)*0.5f+0.5f,
                sin(val*hue.g)*0.5f+0.5f,
                sin(val*hue.b)*0.5f+0.5f,
                1.0);

    val = sqrt((float)(iterationCounter-1)/(float)maxIterations)*20.0f;
    float4 previousColor = float4(
                sin(val*hue.r)*0.5f+0.5f,
                sin(val*hue.g)*0.5f+0.5f,
                sin(val*hue.b)*0.5f+0.5f,
                1.0);


    color = lerp(color, previousColor, interpolation);
                
    if(iterationCounter >= maxIterations){
         color = float4(0.0f,0.0f,0.0f,0.0f);
    }


    Result[id.xy] = color;//float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}
